#!/bin/bash

# Beavr-Bot Code Structure Documentation Generator
# Generates comprehensive overview of codebase structure and naming conventions

echo "# Beavr-Bot Code Structure & Component Reference"
echo "Generated on: $(date)"
echo ""

echo "## Project Overview"
echo "Beavr-Bot is a teleoperation system for robotic manipulation with VR/AR interfaces."
echo ""

echo "## Configuration System (STRUCTURED & VALIDATED)"
echo ""
echo "### Configuration Files Location: \`src/beavr/teleop/configs/\`"
echo ""
echo "#### Core Configuration Modules:"
echo "- **network.py** - Host addresses, robot IPs, handshake ports, teleop control constants"
echo "- **ports.py** - All concrete port numbers and offsets for ZMQ communication"  
echo "- **robots.py** - Robot poses, joint limits, scale factors, identifiers, operational flags"
echo "- **cameras.py** - Camera serial numbers, resolutions, FPS settings, calibration paths"
echo "- **models.py** - Typed dataclass schemas with validation and sub-configurations"
echo ""

echo "#### New Structured Configuration Pattern:"
echo "\`\`\`python"
echo "from beavr.teleop.configs.models import TeleopConfig"
echo ""
echo "# Initialize complete configuration with validation"
echo "config = TeleopConfig()"
echo ""
echo "# Access organized sub-configurations"
echo "config.network.host_address          # Network settings"
echo "config.ports.keypoint_stream_port    # Communication ports"
echo "config.robot.xarm_scale_factor       # Robot parameters"
echo "config.camera.num_cams               # Camera settings"
echo ""
echo "# New structured sub-configs"
echo "config.flags.operate                 # Operation flags"
echo "config.flags.sim_env                 # Simulation mode"
echo "config.resolution.high               # High resolution mode"
echo "config.resolution.low                # Low resolution mode"
echo "config.control.vr_freq               # Control frequencies"
echo "config.control.deploy_reach_threshold # Deployment settings"
echo "\`\`\`"
echo ""

echo "#### Configuration Benefits:"
echo "- **Type Safety**: All fields properly typed with validation"
echo "- **Organized Structure**: Logical grouping into sub-configurations"
echo "- **Input Validation**: Automatic validation of IPs, ports, ranges"
echo "- **Clean Imports**: Terse module imports, no namespace pollution"
echo "- **Future-Proof**: Easy to extend with new sub-configs"
echo ""

echo "#### Validation Examples:"
echo "\`\`\`python"
echo "# IP address validation"
echo "NetworkConfig(host_address='invalid')  # → AssertionError"
echo ""
echo "# Port range validation"
echo "NetworkConfig(teleop_handshake_port=99999)  # → AssertionError"
echo ""
echo "# Robot parameter validation"
echo "RobotConfig(xarm_scale_factor=-1)  # → AssertionError"
echo "\`\`\`"
echo ""

echo "## Directory Structure"
echo ""
echo "### Core Modules"
echo "- \`src/beavr/teleop/\` - Main teleoperation framework"
echo "  - \`components/\` - Modular system components (detectors, operators, recorders)"
echo "  - \`controllers/\` - Robot-specific control interfaces"
echo "  - \`interfaces/\` - Robot abstraction layer"
echo "  - \`utils/\` - Utilities (networking, timers, transformations)"
echo "  - \`configs/\` - Configuration management"
echo ""

echo "### Component Categories"
echo ""

echo "#### Detectors (\`components/detector/\`)"
find src/beavr/teleop/components/detector/ -name "*.py" 2>/dev/null | grep -v __pycache__ | while read file; do
    echo "- \`$(basename "$file" .py)\` - $(head -n 10 "$file" | grep -E "class|def|\"\"\"" | head -1 | sed 's/.*class //' | sed 's/.*def //' | sed 's/[:(].*$//' | tr -d '"')"
done
echo ""

echo "#### Operators (\`components/operators/\`)"
find src/beavr/teleop/components/operators/ -name "*.py" 2>/dev/null | grep -v __pycache__ | while read file; do
    echo "- \`$(basename "$file" .py)\` - $(head -n 20 "$file" | grep -E "class.*Operator" | head -1 | sed 's/.*class //' | sed 's/[:(].*$//')"
done
echo ""

echo "#### Recorders (\`components/recorders/\`)"
find src/beavr/teleop/components/recorders/ -name "*.py" 2>/dev/null | grep -v __pycache__ | while read file; do
    echo "- \`$(basename "$file" .py)\` - $(head -n 10 "$file" | grep -E "class|def|\"\"\"" | head -1 | sed 's/.*class //' | sed 's/.*def //' | sed 's/[:(].*$//' | tr -d '"')"
done
echo ""

echo "#### Robot Interfaces (\`interfaces/\`)"
find src/beavr/teleop/interfaces/ -name "*.py" 2>/dev/null | grep -v __pycache__ | while read file; do
    echo "- \`$(basename "$file" .py)\` - $(head -n 20 "$file" | grep -E "class.*Robot" | head -1 | sed 's/.*class //' | sed 's/[:(].*$//')"
done
echo ""

echo "## Key Constants & Naming Conventions"
echo ""

echo "### Port Number Ranges"
echo "- **8000-8199**: Core teleop communication (keypoints, control, robot state)"
echo "- **10000-10999**: Robot-specific ports (XArm, Leap hand state publishing)"
echo "- **15000+**: Visualization and debugging ports"
echo ""

echo "### Robot Identifiers"
echo "- \`right_xarm7\` / \`left_xarm7\` - XArm7 robot arms"
echo "- \`leap\` - Leap Hand manipulator"
echo "- Use these exact strings for robot configuration selection"
echo ""

echo "### Data Stream Topics"
echo "- \`endeff_coords\` - End effector coordinate commands"
echo "- \`joint\` - Joint angle commands/states"
echo "- \`reset\` - Robot reset signals"
echo "- \`pause\` - Teleoperation pause/continue state"
echo "- \`gripper_right\` / \`gripper_left\` - Gripper state commands"
echo ""

echo "### Configuration Structure"
echo "- \`config.flags.*\` - Boolean operational flags (operate, sim_env, run_xela)"
echo "- \`config.control.*\` - Control parameters (frequencies, thresholds)" 
echo "- \`config.resolution.*\` - Resolution settings (high/low modes)"
echo "- \`config.network.*\` - Network and IP configuration"
echo "- \`config.ports.*\` - All ZMQ port assignments"
echo "- \`config.robot.*\` - Robot-specific parameters and identifiers"
echo "- \`config.camera.*\` - Camera settings and calibration paths"
echo ""

echo "## Testing Structure"
echo ""
echo "### Test Categories (\`tests/\`)"
echo "- \`components/\` - Unit tests for individual components"
echo "- \`integration/\` - End-to-end system tests"
echo "- \`robot/\` - Hardware-specific robot tests"
echo ""

echo "## Asset Management (\`assets/\`)"
echo "- \`urdf/\` - Robot descriptions (XArm7, Leap hand, Allegro hand)"
echo "- \`meshes/\` - 3D models for simulation and visualization"
echo "- \`wrench/\` - Tool-specific assets"
echo ""

echo "## Development Guidelines"
echo ""
echo "### Configuration Best Practices"
echo "- Always use the structured \`TeleopConfig\` for new code"
echo "- Validation happens automatically - don't bypass it"
echo "- Use sub-configs to organize related settings logically"
echo "- Add validation rules for new parameters in \`__post_init__\`"
echo ""

echo "### Logging & Debugging"
echo "- All components support \`logging_config\` parameter with \`enabled\` flag"
echo "- Use \`config.flags.*\` to enable/disable logging and visualization modes"
echo "- Centralized logging directory: \`logs/\`"
echo ""

echo "### Real-time Data Handling"
echo "- Target frequency: \`config.control.vr_freq\` (default 30Hz)"
echo "- Use \`FrequencyTimer\` for consistent loop timing"
echo "- Implement proper ZMQ communication patterns (pub/sub, req/rep)"
echo ""

echo "### Modular Design Principles"
echo "- Each component implements standard interface (detector, operator, recorder)"
echo "- Configuration via structured dataclass models with type safety"
echo "- Dependency injection through constructor parameters"
echo "- Clean separation of concerns between detection, control, and recording"
echo ""

echo "## New Main Entry Point & CLI Interface"
echo ""
echo "### Entry Point: \`src/beavr/teleop/main.py\`"
echo "- **Replaced**: Old CLI in \`__init__.py\` (deprecated)"
echo "- **Draccus Integration**: Auto-generates CLI flags for all nested config fields"
echo "- **Structured Config**: Uses new \`TeleopConfig\` with enterprise-grade validation"
echo "- **YAML Overrides**: Environment-specific configuration with precedence system"
echo ""
echo "### YAML Configuration System"
echo ""
echo "#### Environment Configuration Files: \`config/\`"
echo "- **dev.yaml** - Development environment (localhost, test IPs)"
echo "- **prod.yaml** - Production environment (production IPs)"
echo "- **staging.yaml** - Staging/testing environment (staging IPs)"
echo ""
echo "#### Configuration Precedence (Highest → Lowest):"
echo "1. **CLI Flags** (--teleop.network.host_address=...)"
echo "2. **YAML Config File** (--config_file=config/prod.yaml)"
echo "3. **Default Values** (from structured config)"
echo ""
echo "#### YAML File Structure:"
echo "\`\`\`yaml"
echo "teleop:"
echo "  network:"
echo "    host_address: \"10.31.152.148\""
echo "    left_xarm_ip: \"192.168.86.216\""
echo "    right_xarm_ip: \"192.168.86.230\""
echo "    xarm_left_ip: \"192.168.86.216\""
echo "    xarm_right_ip: \"192.168.86.230\""
echo "\`\`\`"
echo ""
echo "### CLI Usage Examples"
echo "\`\`\`bash"
echo "# Single robot usage"
echo "python -m beavr.teleop.main --robot_name=leap --laterality=right"
echo "python -m beavr.teleop.main --robot_name=xarm7 --laterality=left"
echo ""
echo "# Multi-robot usage (replaces leap_xarm_right config)"
echo "python -m beavr.teleop.main --robot_name=leap,xarm7 --laterality=right"
echo ""
echo "# Use production environment"
echo "python -m beavr.teleop.main --robot_name=leap,xarm7 --config_file=config/prod.yaml"
echo ""
echo "# Use staging environment"
echo "python -m beavr.teleop.main --robot_name=leap,xarm7 --config_file=config/staging.yaml"
echo ""
echo "# Override network settings via CLI (highest priority)"
echo "python -m beavr.teleop.main --robot_name=leap_pybullet \\"
echo "    --config_file=config/prod.yaml \\"
echo "    --teleop.network.host_address=192.168.1.100"
echo ""
echo "# Enable simulation mode"  
echo "python -m beavr.teleop.main --robot_name=leap_pybullet \\"
echo "    --teleop.flags.sim_env=True"
echo ""
echo "# Override control parameters"
echo "python -m beavr.teleop.main --robot_name=leap,xarm7 \\"
echo "    --teleop.control.vr_freq=60 \\"
echo "    --teleop.control.deploy_freq=10"
echo ""
echo "# Override multiple port settings"
echo "python -m beavr.teleop.main --robot_name=xarm7 \\"
echo "    --teleop.ports.keypoint_stream_port=9000 \\"
echo "    --teleop.ports.control_stream_port=9001"
echo ""
echo "# See all available CLI flags"
echo "python -m beavr.teleop.main --help"
echo "\`\`\`"
echo ""
echo "### Available CLI Flag Patterns"
echo "- \`--robot_name=ROBOT\` - Required robot selection"
echo "- \`--teleop.network.*\` - Network configuration (IPs, handshake port)"
echo "- \`--teleop.ports.*\` - All ZMQ port overrides"
echo "- \`--teleop.flags.*\` - Boolean operation modes"
echo "- \`--teleop.control.*\` - Control frequencies and thresholds"
echo "- \`--teleop.camera.*\` - Camera settings and calibration"
echo "- \`--teleop.robot.*\` - Robot-specific parameters"
echo ""

echo "### Updated TeleOperator (Backward Compatible)"
echo ""
echo "#### Structured Config Support"
echo "- **Automatic Detection**: Recognizes new vs legacy config formats"
echo "- **Adapter Pattern**: StructuredConfigAdapter provides seamless compatibility"
echo "- **Zero Breaking Changes**: Existing code continues to work unchanged"
echo ""
echo "#### Configuration Mapping:"
echo "\`\`\`python"
echo "# Legacy flat access → New structured access"
echo "configs.sim_env          → configs.teleop.flags.sim_env"
echo "configs.operate          → configs.teleop.flags.operate"
echo "configs.host_address     → configs.teleop.network.host_address"
echo "configs.cam_port_offset  → configs.teleop.ports.cam_port_offset"
echo "configs.robot.detector   → configs.robot.detector  # Direct passthrough"
echo "\`\`\`"
echo ""

echo "## Quick Setup Commands"
echo ""
echo "\`\`\`bash"
echo "# Install dependencies"
echo "pip install -r requirements.txt"
echo ""
echo "# Run teleop system (NEW MAIN ENTRY POINT)"
echo "python -m beavr.teleop.main --robot_name=leap,xarm7 --laterality=right"
echo ""
echo "# Legacy import still works for backward compatibility"
echo "python -c \"from beavr.teleop import TeleopConfig; cfg=TeleopConfig()\""
echo "\`\`\`"
echo ""

echo "## Configuration Migration Examples"
echo ""
echo "\`\`\`python"
echo "# OLD WAY (deprecated):"
echo "from beavr.teleop.constants import OPERATE, SIM_ENV, HOST_ADDRESS"
echo ""
echo "# NEW WAY (structured & validated):"
echo "from beavr.teleop.configs.models import TeleopConfig"
echo "config = TeleopConfig()"
echo "operate = config.flags.operate"
echo "sim_env = config.flags.sim_env"
echo "host_address = config.network.host_address"
echo "\`\`\`"
echo ""

echo "---"
echo "For detailed implementation, see individual component documentation and test files." 